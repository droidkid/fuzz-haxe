//===-- haxe_proto.proto - Protobuf description of Haxe ---------------------===//
//
///
/// This file describes a subset of haxe (https://haxe.org) as a protobuf.  
/// The idea is to mutate messages of protos defined in this file using libprotobuf-mutator.
/// The programs generated will be used to test the haxe transpiler.
///
/// This approach is inspired by the approach taken in clang-fuzzer
/// https://github.com/llvm-mirror/clang/tree/master/tools/clang-fuzzer
///
/// TODO: Add more of the haxe language.
///
//===----------------------------------------------------------------------===//

syntax = "proto2";

package haxe_fuzzer;

// VarRef, Const, LValue, RValue are only integers for now.
// TODO: Add more types.

message VarRef {
  required int32 varnum = 1;
}

message Lvalue {
  required VarRef varref = 1;
}

message Const {
  required int32 val = 1;
}

message BoolConst {
  enum BoolValue {
    FALSE = 0;
    TRUE = 1;
  };
  required BoolValue value = 1;
}

message ArithExp {
  enum ArithOp {
    PLUS = 0;
    MINUS = 1;
    MUL = 2;
    DIV = 3;
    MOD = 4;
    XOR = 5;
  };
  required ArithOp op = 1;
  required Rvalue left = 2;
  required Rvalue right = 3;
}

message CompareExp {
  enum CompareOp {
    EQ = 0;
    NE = 1;
    LE = 2;
    GE = 3;
    LT = 4;
    GT = 5;
  };
  required CompareOp op = 1;
  required Rvalue left = 2;
  required Rvalue right = 3;
}

message LogicalExp {
  enum LogicalOp {
    AND = 0;
    OR = 1;
  };
  required LogicalOp op = 1;
  required Condition left = 2;
  required Condition right = 3;
}

message Condition {
  oneof condition {
    BoolConst bool_const = 1;
    LogicalExp logical_exp = 2;
    CompareExp  compare_exp = 3;
  }
}

message Rvalue {
  oneof rvalue_oneof {
    VarRef varref = 1;
    Const cons = 2;
    ArithExp arith_exp = 3;
  }
}

message AssignmentStatement {
  required Lvalue lvalue = 1;
  required Rvalue rvalue = 2;
}


message IfElse {
  required Condition cond = 1;
  required StatementSeq if_body = 2;
  required StatementSeq else_body = 3;
}

message While {
  required Condition cond = 1;
  required StatementSeq body = 2;
}

// TODO: Add ranged loops (i from 0...100)
// TODO: Add break/continue in loops

message Statement {
  oneof stmt_oneof {
    AssignmentStatement assignment = 1;
    IfElse              ifelse     = 2;
    While               while_loop = 3;
  }
}

message StatementSeq {
  repeated Statement statements = 1;
}

message HaxeProgram {
  required StatementSeq main_body = 1;
}